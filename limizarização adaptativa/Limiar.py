# -*- coding: utf-8 -*-
"""Trabalho Douglas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J1yT1Bcc29nLVqrgvBxCVnGSEfVjkN7S

####LIMIARIZAÇÃO ADAPTATIVA

#1°. Carregar biblioteca
"""

import cv2 # OpenCV
import numpy as np
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow
from PIL import Image

"""#2°. Montar a pasta do Drive do Google


"""

from google.colab import drive
drive.mount('/content/drive/')

"""#3°. Carregar imagem da pasta Drive"""

img = cv2.imread('/content/drive/MyDrive/TEXTO_LIM.jpg', cv2.IMREAD_UNCHANGED)
plt.imshow(img)

"""#4°. Converta a imagem para RGB"""

rgb = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
plt.imshow(rgb)

"""#5°. Converta para tons de cinza"""

gray = cv2.cvtColor(rgb, cv2.COLOR_BGR2GRAY)
plt.imshow(gray, cmap='gray')

"""#6°. Gere seu histograma"""

fig = plt.gcf()
plt.hist(gray.ravel(), 256, [0,256])
fig.set_size_inches(12,6)
plt.title('Histograma da imagem')
plt.show()

"""#7°. Aplique o método de Otsu com a limiarização simples"""

valor, otsu = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
print('Valor de limiar Otsu: ', valor)
plt.imshow(otsu, cmap='gray')

"""#8°. Aplique a limiarização adaptativa utilizando a média (5 = média entre 5 pixels)"""

adapt_media = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
cv2.THRESH_BINARY, 11, 5)
plt.imshow(adapt_media, cmap='gray')

"""#9°. Aplique a limiarização adaptativa utilizando a gaussiana"""

adapt_gauss = cv2.adaptiveThreshold(gray, 255,
cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 4)
plt.imshow(adapt_gauss, cmap='gray')

"""#10°. Crie uma função para mostrar todos os resultados ao mesmo tempo"""

def limiarizacao_adaptativa(img, limiar = 140, block_size = 11, C = 9):
        _, limiar_global = cv2.threshold(img, limiar, 255, cv2.THRESH_BINARY)
        limiar_media = cv2.adaptiveThreshold(img, 255,
cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, block_size, C)
        limiar_gauss = cv2.adaptiveThreshold(img, 255,
cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, block_size, C)

        imagens = [img, limiar_global, limiar_media, limiar_gauss]
        titulos = ['Imagem original', 'Limiarização global', 'Limiarização adaptativa - média',
'Limiarização adaptativa - gaussina']

        fig = plt.gcf()
        fig.set_size_inches(18,12)
        for i in range(4):
                 plt.subplot(2,2,i+1)
                 plt.imshow(cv2.cvtColor(imagens[i], cv2.COLOR_BGR2RGB), cmap='gray')
                 plt.title(titulos[i])
        plt.xticks([]),plt.yticks([])

"""#11°. Chame a função para exibir os resultados da imagem ao mesmo tempo"""

limiarizacao_adaptativa(gray)